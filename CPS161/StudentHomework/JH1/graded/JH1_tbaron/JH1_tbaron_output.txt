PS 161 JH1 Baron
 JH1 worksheet

 Comments:

 ***************** Class Participation    *****************

 Your Class Participation Entry for JH1:

 I was unable to duplicate Ty's result in my jar problem, mine came out to $1.41 without limiting decimals. However, I did have this problem in the gas mileage problem (accounting for sig figs), thus I built in a decimal limiter in the jar problem just in case.

 I used this in both the gas mileage and jar problem. To limit the digits use:

 import java.text.DecimalFormat;

 DecimalFormat numberFormat = new DecimalFormat("#.00")

 each zero after # (or lack-there-of) will change the number of digits from the decimal point

 For example, in the jar problem using the numbers given in the HW problem would be:

 Make variables, input statements, and decide how you want to calculate the "total" variable into dollar and cent format, then for:

 float = total;

 To avoid going over two decimal places:

 import java.text.DecimalFormat;

 DecimalFormat numberFormat = new DecimalFormat("#.00");

 System.out.println("The total is $= " + numberFormat.format(total));

 Discussion board containing your entry: JH1 Questions/Answers

 Date of your Entry: 9/4/17

 Subject Line of your entry: Limiting Decimals - Float Point Precision

 ***************** primitive_variables    *****************

 primitive_variables output with good values for "num1" and "num2"

 num 1 = 2.57 and num 2 = .358 and answer = 2.928

 What happens when bad values (like "xyz") are entered for "num1" or "num2"
 in the primitive_variables homework

 When run with "xyz" I get

 Exception in thread "main" java.util.InputMismatchException
     at java.util.Scanner.throwFor(Scanner.java:864)
     at java.util.Scanner.next(Scanner.java:1485)
     at java.util.Scanner.nextDouble(Scanner.java:2413)
     at primitive_variables.PrimitiveVariables.main(PrimitiveVariables.java:18)
 ____________________________________

 ***************** gas_mileage    *****************

 gas_mileage output with inputs of 300 miles and 12.3 gallons

 gas mileage output is 24.390244 mpg - I also experiemented with DecimalFormat to remove the extra digits that go way beyong sig figs and got 24 mpg.
 ___________________________________

 ***************** averager    *****************

 averager output with inputs of 11, 15, and 24.

 average (mean) = 16
 ____________________________________

 ***************** jar    *****************

 Output from your jar program:

 Enter the number of pennies:
 0
 Enter the number of nickels:
 0
 Enter the number of dimes:
 0
 Enter the number of quarters:
 1
 The total is = $.25

 Enter the number of pennies:
 2
 Enter the number of nickels:
 3
 Enter the number of dimes:
 4
 Enter the number of quarters:
 5
 The total is = $1.82
 ____________________________________

 ***************** make_change    *****************

 Output from your make_change program:

 Enter the number of dollars in the price:
 1
 Enter the number of cents in the price:
 0
 Enter the number of dollars received as payment:
 2
 Enter the number of cents received as payment:
 23
 The total cost of the item is 100 cents
 You paid 223 cents
 The change owed to you is 123 cents
 You get:
 1 dollar(s)
 0 quarter(s)
 2 dime(s)
 0 nickel(s)
 3 penn(y)(ies)

 Enter the number of dollars in the price:
 3
 Enter the number of cents in the price:
 51
 Enter the number of dollars received as payment:
 5
 Enter the number of cents received as payment:
 0
 The total cost of the item is 351 cents
 You paid 500 cents
 The change owed to you is 149 cents
 You get:
 1 dollar(s)
 1 quarter(s)
 2 dime(s)
 0 nickel(s)
 4 penn(y)(ies)

 Enter the number of dollars in the price:
 0
 Enter the number of cents in the price:
 75
 Enter the number of dollars received as payment:
 3
 Enter the number of cents received as payment:
 52
 The total cost of the item is 75 cents
 You paid 352 cents
 The change owed to you is 277 cents
 You get:
 2 dollar(s)
 3 quarter(s)
 0 dime(s)
 0 nickel(s)
 2 penn(y)(ies)
 ____________________________________
